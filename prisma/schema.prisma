// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ref: https://authjs.dev/getting-started/adapters/prisma

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_tokem     String?  @db.ObjectId
  access_token      String?  @db.ObjectId
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  emailVerified  String?
  image          String?
  hashedPassword String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Session        Session[]
  Account        Account[]
  Order          Order[]
  Store          Store[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  slug     String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  products Product[]
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  description String?
  price       Float
  images      Json
  storeId     String
  Store       Store       @relation(fields: [storeId], references: [id])
  categoryId  String
  Category    Category    @relation(fields: [categoryId], references: [slug])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@index([storeId, categoryId, name, slug])
}

model Store {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  userId      String
  User        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Product     Product[]
  OrderItem   OrderItem[]

  @@index([userId])
}

model Order {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  totalPrice Float
  token      String
  status     TRANSACTION_STATUS
  userId     String
  User       User               @relation(fields: [userId], references: [id])
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  orderItems OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  storeId   String
  store     Store   @relation(fields: [storeId], references: [id])

  @@index([orderId])
  @@index([productId])
}

enum TRANSACTION_STATUS {
  PENDING
  PAID
  CANCELED
}
